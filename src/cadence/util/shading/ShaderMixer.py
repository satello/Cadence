# ShaderMixer.py
# (C)2013
# Kent A. Stevens

from cadence.util.shading.ShadingUtils import ShadingUtils

#___________________________________________________________________________________________________ ShaderMixer
class ShaderMixer(object):
    """A class for..."""

#===================================================================================================
#                                                                                       C L A S S

#___________________________________________________________________________________________________ __init__
    def __init__(self, shaderConfig):
        """Creates a new instance of ShaderMixer."""
        self._shaderConfig = shaderConfig



#===================================================================================================
#                                                                                   G E T / S E T

#___________________________________________________________________________________________________ GS: propertyName
    @property
    def propertyName(self):
        return None
    @propertyName.setter
    def propertyName(self, value):
        pass

#===================================================================================================
#                                                                                     P U B L I C

#___________________________________________________________________________________________________
    def create(self):
         ShadingUtils.createShaderFromConfig(self._shaderConfig)

#___________________________________________________________________________________________________
    def shade(self, transforms):
        ShadingUtils.applyShader(self._shaderConfig, transforms)

#___________________________________________________________________________________________________
    def getShaded(self):
        cmds.ls()

#===================================================================================================
#                                                                               P R O T E C T E D

#___________________________________________________________________________________________________ _internalMethod
    def _internalMethod(self):
        """Doc..."""
        pass

#===================================================================================================
#                                                                               I N T R I N S I C

#___________________________________________________________________________________________________ __repr__
    def __repr__(self):
        return self.__str__()

#___________________________________________________________________________________________________ __unicode__
    def __unicode__(self):
        return unicode(self.__str__())

#___________________________________________________________________________________________________ __str__
    def __str__(self):
        return '<%s>' % self.__class__.__name__
